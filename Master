import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

MONTH_DATA = {'january', 'jan', 'february', 'feb', 'march', 'mar', 'april', 'apr', 'may', 'may', 'june', 'jun', 'all', 'all'}

DAY_LIST = ['all', 'monday', 'mon', 'tuesday', 'tue', 'wednesday', 'wed', 'thursday', 'thu', 'friday', 'fri', 'saturday', 'sat', 'sunday', 'sun']

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
      city = input("\nWhich city would you like to analyze? New York City, Chicago or Washington?\n")
      if city not in ('New York City', 'Chicago', 'Washington'):
        print("Sorry, please check your spelling and try again.")
        continue
      else:
        break

    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
      month = input("\nWhich month would you like to analyze: January, February, March, April, May, June or type 'all'.\n")
      if month not in ('January', 'February', 'March', 'April', 'May', 'June', 'all'):
        print("Sorry please check your spelling and try again.")
        continue
      else:
        break

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
      day = input("\nWhich day would you like to analyze: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or type 'all'.\n")
      if day not in ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'all'):
        print("Sorry please check your spelling and try again..")
        continue
      else:
        break

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    try:
        df = pd.read_csv(CITY_DATA[city])
     
        df['Start Time'] = pd.to_datetime(df['Start Time'])
        df['End Time'] = pd.to_datetime(df['End Time'])
        df['month'] = df['Start Time'].dt.month
        df['day_of_week'] = df['Start Time'].dt.weekday_name 
        df['hour'] = df['Start Time'].dt.hour
        if month != 'all':
            month = ['january', 'february', 'march', 'april', 'may', 'june']
            month = MONTH_LIST.index(month) + 1 
        df = df[df['month'] == month]
        
        if day != 'all':
            df = df[df['day_of_week'] == day.title()] 
        return df
    except Exception as e:
        print('Error: Couldn\'t load the file: {}'.format(e))
    

def time_stats(df, city):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    try:
        popular_month_num = df['Start Time'].dt.month.mode()[0]
        popular_month = MONTH_LIST[popular_month_num-1].title()
        print('The most popular month in', city, 'is:', popular_month)
    except Exception as e:
        print('Error: Couldn\'t calculate the most common month: {}'.format(e))

    # TO DO: display the most common day of week
    try:
        popular_day_of_week = df['day_of_week'].mode()[0]
        print('The most popular weekday in', city, 'is:',popular_day_of_week)
    except Exception as e:
        print('Error: Couldn\'t calculate the most common day of week: {}'.format(e))


    # TO DO: display the most common start hour
    try:
        popular_start_hour = df['hour'].mode()[0]
        print('The most popular starting hour in', city, 'is:',popular_start_hour)
    except Exception as e:
        print('Error: Couldn\'t calculate the most common start hour: {}'.format(e))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    try:
        popular_start_station = df['Start Station'].mode()[0]
        popular_start_station_amount = df['Start Station'].value_counts()[0]
        print('The most popular start station in', city, 'is:',popular_start_station, 'and was used', popular_start_station_amount, 'times.')
    except Exception as e:
        print('Error: Couldn\'t calculate the most used start station: {}'.format(e))
        
    # TO DO: display most commonly used end station
    try:
        popular_end_station = df['End Station'].mode()[0]
        popular_end_station_amount = df['End Station'].value_counts()[0]
        print('The most popular end station in', city, 'is:',popular_end_station, 'and was used', popular_end_station_amount, 'times.')
    except Exception as e:
        print('Error: Couldn\'t calculate the most used end station: {}'.format(e))

    # TO DO: display most frequent combination of start station and end station trip
 
    try:
        popular_trip = df.loc[:, 'Start Station':'End Station'].mode()[0:]
        popular_trip_amt = df.groupby(["Start Station", "End Station"]).size().max()
        print('the most popular trip is:\n', popular_trip, '\n and was driven', popular_trip_amt,'times')
    except Exception as e:
        print('Error: Couldn\'t calculate the most frequent combination of start station and end station: {}'.format(e))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    try:
        df['Time Delta'] = df['End Time'] - df['Start Time']
        total_time_delta = df['Time Delta'].sum()
        print('the total travel time was:', total_time_delta)
    except Exception as e:
        print('Error: Couldn\'t calculate the total travel time of users: {}'.format(e))

        
    # TO DO: display mean travel time
    try:
        total_mean = df['Time Delta'].mean()
        print('the mean travel time was about:', total_mean)
    except Exception as e:
        print('Error: Couldn\'t calculate the mean travel time of users: {}'.format(e))
    print("\nThis took %s seconds." % (time.time() - start_time))


    print('-'*40)

def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    try:
        print('The amount and type of users in', city, 'are as followed:\n', df['User Type'].value_counts())
    except Exception as e:
        print('Error: Couldn\'t calculate the type of users: {}'.format(e))

    # TO DO: Display counts of gender
    try:
        print('The amount and gender of users in', city, 'are as followed:\n',df['Gender'].value_counts())
    except Exception as e:
        print('Error: Couldn\'t calculate the amount and gender of users: {}'.format(e))
        
    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        earliest_year = df['Birth Year'].min()
        most_recent_year = df['Birth Year'].max()
        most_common_year = df['Birth Year'].mode()
        print('The age of customers in', city, 'is:\n' 'oldest customer was born in:', int(earliest_year),'\n' 'youngest customer: was born in:', int(most_recent_year),'\n' 'most of our                       customers are born in:', int(most_common_year))
    except Exception as e:
        print('Error: Couldn\'t calculate the age structure of our customers: {}'.format(e))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def display_data(df):
    """Displays 5 rows of data from the csv file for the selected city.

    Args:
        param1 (df): The data frame you wish to work with.

    Returns:
        None.
    """
    BIN_RESPONSE_LIST = ['yes', 'no']
    rdata = ''
    #counter variable is initialized as a tag to ensure only details from
    #a particular point is displayed
    counter = 0
    while rdata not in BIN_RESPONSE_LIST:
        print("\nWould you like to see the raw data?")
        print("\nPlease type:\nYes or yes\nNo or no")
        rdata = input().lower()
        #the raw data from the df is displayed if user opts for it
        if rdata == "yes":
            print(df.head())
        elif rdata not in BIN_RESPONSE_LIST:
            print("\nPlease check your response.")
            print("\nPlease check your response and enter an acceptable input.")
            print("\nRestarting...\n")

    #Extra while loop here to ask user if they want to continue viewing data
    while rdata == 'yes':
        print("Would you like to see more raw data?")
        counter += 5
        rdata = input().lower()
        #If user opts for it, this displays next 5 rows of data
        if rdata == "yes":
             print(df[counter:counter+5])
        elif rdata != "yes":
             break

    print('-'*80)



def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df, city)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
